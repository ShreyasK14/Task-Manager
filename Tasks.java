import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JTable;

public class Tasks extends javax.swing.JFrame {
    private MainWindow main;
    private ArrayList<Task> tasks;
    private HashMap<String, ArrayList<Task>> groups;
    private String selectedGroup;
    
    /**
     * Creates new form Tasks
     */
    public Tasks() {
        initComponents();
    }
    
    //this constructor is used when the Tasks Window is created in the Main Window
    public Tasks(MainWindow main) throws IOException {
        initComponents();
        this.main = main;
        tasks = main.getTasks();
        groups = main.getGroups();
        selectedGroup = main.getSelectedGroup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane_data = new javax.swing.JScrollPane();
        jTable_dataTable = new javax.swing.JTable();
        jButton_removeTask = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable_dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane_data.setViewportView(jTable_dataTable);

        jButton_removeTask.setText("Remove Task");
        jButton_removeTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_removeTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_removeTask, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane_data, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton_removeTask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane_data, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //when the Window is opened
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // gets the ArrayList of the selected group to view
        ArrayList<Task> group = groups.get(selectedGroup);
        if (group == null) {
            //if no group was selected
            //use the tasks ArrayList which contains every Task in every group
            //makes a matrix of data from tasks and array of headers
            //and the data of the tasks themselves
            String[][] data = new String[tasks.size()][3];
            String[] columnHeaders = new String[3];
            columnHeaders[0] = "Name";
            columnHeaders[1] = "Title";
            columnHeaders[2] = "Description";
            for (int i = 0; i < tasks.size(); i++) {
                data[i][0] = tasks.get(i).getName();
                data[i][2] = tasks.get(i).getDescriptionTitle();
                data[i][1] = tasks.get(i).getDescription();
            }
            jTable_dataTable = new JTable(data, columnHeaders);
            jScrollPane_data.setViewportView(jTable_dataTable);
        }
        else {
            //does the same thing as above but only uses the selected group
            String[][] data = new String[group.size()][3];
            String[] columnHeaders = new String[3];
            columnHeaders[0] = "Name";
            columnHeaders[1] = "Title";
            columnHeaders[2] = "Description";
            for (int u = 0; u < group.size(); u++) {
                data[u][0] = group.get(u).getName();
                data[u][1] = group.get(u).getDescriptionTitle();
                data[u][2] = group.get(u).getDescription();
            }
            //creates a table and adds all the data and headers into the table
            jTable_dataTable = new JTable(data, columnHeaders);
            jScrollPane_data.setViewportView(jTable_dataTable);
        }
        
    }//GEN-LAST:event_formWindowOpened

    //when the remove button is clicked
    private void jButton_removeTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_removeTaskActionPerformed
        //if there is no task selected this stops the method
        if (jTable_dataTable.getSelectedRow() == -1)
            return;
        //gets the selected task and removes that from the tasks list
        //and then views all tasks
        int rowNumber = jTable_dataTable.getSelectedRow();
        main.removeTask(rowNumber);
        String[][] data = new String[tasks.size()][3];
        String[] columnHeaders = new String[3];
        columnHeaders[0] = "Name";
        columnHeaders[1] = "Title";
        columnHeaders[2] = "Description";
        for (int u = 0; u < tasks.size(); u++) {
            data[u][0] = tasks.get(u).getName();
            data[u][1] = tasks.get(u).getDescriptionTitle();
            data[u][2] = tasks.get(u).getDescription();
        }
        jTable_dataTable = new JTable(data, columnHeaders);
        jScrollPane_data.setViewportView(jTable_dataTable);
    }//GEN-LAST:event_jButton_removeTaskActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tasks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_removeTask;
    private javax.swing.JScrollPane jScrollPane_data;
    private javax.swing.JTable jTable_dataTable;
    // End of variables declaration//GEN-END:variables
}
